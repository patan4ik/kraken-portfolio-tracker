# start.py
import logging
import os
import sys
import argparse

# –¥–æ–±–∞–≤–ª—è–µ–º src –≤ PYTHONPATH
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

import storage
import ledger_loader
import ledger_eur_report
import ledger_asset_report
import ledger_sell_report
import balances
import keys  # <--- NEW


logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s"
)


def setup_keys():
    """Interactive setup for Kraken API keys."""
    logger.info("üîë Starting Kraken API key setup...")
    keys.save_keyfile()
    logger.info("‚úÖ Kraken API keys saved. You can now run the app normally.")


def main():
    parser = argparse.ArgumentParser(description="Kraken Portfolio Tracker")
    parser.add_argument(
        "--setup-keys",
        action="store_true",
        help="Interactive setup to save Kraken API keys locally",
    )

    # Allow pytest/other tools to pass extra args without breaking
    args, _ = parser.parse_known_args()

    if args.setup_keys:
        setup_keys()
        return

    logger.info("üöÄ Kraken Portfolio Tracker initialization started")

    # 1. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å (–µ—Å–ª–∏ –∫–ª—é—á–∏ Kraken —Ä–∞–±–æ—Ç–∞—é—Ç ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ —Å—Ä–∞–∑—É —É–≤–∏–¥–∏—Ç)
    try:
        balances.main()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è: %s", e)

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É
    if os.path.exists(storage.DB_FILE):
        logger.info("‚úÖ ledger.db already exists")
    elif os.path.exists(storage.RAW_LEDGER_FILE):
        logger.info("üí°Found raw-ledger.json, creating SQLite DB from it...")
        raw_entries = storage.load_entries()
        if raw_entries:
            storage.save_entries(raw_entries)
            logger.info("‚úÖ SQLite DB created from raw-ledger.json")
        else:
            logger.warning("‚ö†Ô∏è raw-ledger.json is empty, skipping DB creation ")
            logger.info(
                "üí° No valid raw-ledger.json or ledger.db found. Downloading raw ledger from Kraken..."
            )
            ledger_loader.update_raw_ledger(days=30)
            logger.info("Ledger downloaded. Creating SQLite DB...")
            storage.init_db()
    else:
        logger.info(
            "üí° No valid raw-ledger.json or ledger.db found. Downloading raw ledger from Kraken..."
        )
        ledger_loader.update_raw_ledger(days=30)
        logger.info("Ledger downloaded. Creating SQLite DB...")
        storage.init_db()

    # 3. –°–æ–∑–¥–∞—ë–º –≤—Å–µ –æ—Ç—á—ë—Ç—ã
    logger.info("Generating reports...")
    entries = storage.load_entries_from_db()
    eur_df = ledger_eur_report.build_eur_report(entries, days=10)
    asset_df = ledger_asset_report.build_asset_report(entries, days=10)
    sell_df = ledger_sell_report.build_sell_report(entries, days=10)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º CSV
    if eur_df is not None and not eur_df.empty:
        ledger_eur_report.save_eur_report(eur_df)
    if asset_df is not None and not asset_df.empty:
        ledger_asset_report.save_asset_report(asset_df)
    if sell_df is not None and not sell_df.empty:
        ledger_sell_report.save_sell_report(sell_df)

    logger.info("Reports generated:")
    if eur_df is not None:
        logger.info(f" - EUR report: {len(eur_df)} rows")
    if asset_df is not None:
        logger.info(f" - Asset report: {len(asset_df)} rows")
    if sell_df is not None:
        logger.info(f" - Sell report: {len(sell_df)} rows")

    logger.info("‚úÖ Initialization completed successfully.")


if __name__ == "__main__":
    main()
